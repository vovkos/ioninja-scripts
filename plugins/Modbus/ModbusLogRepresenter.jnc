//..............................................................................
//
// Modbus RTU log record declarations and representer
//

import "log_Representation.jnc"
import "log_RepresentDynamicLayout.jnc"
import "io_Modbus.jnc"
import "ModbusLogRecordCode.jnc"

//..............................................................................

bool representModbusLog(
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
) {
	switch (recordCode) {
	case ModbusLogRecordCode.MasterPacket_Rtu:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.TxPacket;
		jnc.DynamicLayout layout(jnc.DynamicLayoutMode.Save, p, size);
		io.layoutModbusRtuAdu(layout, io.ModbusRole.Master);
		log.representDynamicLayout(representation, layout, foldFlags);
		break;

	case ModbusLogRecordCode.SlavePacket_Rtu:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.RxPacket;
		jnc.DynamicLayout layout(jnc.DynamicLayoutMode.Save, p, size);
		io.layoutModbusRtuAdu(layout, io.ModbusRole.Slave);
		log.representDynamicLayout(representation, layout, foldFlags);
		break;

	case ModbusLogRecordCode.MasterPacket_Ascii:
		representModbusAsciiAdu(representation, io.ModbusRole.Master, p, size, foldFlags);
		break;

	case ModbusLogRecordCode.SlavePacket_Ascii:
		representModbusAsciiAdu(representation, io.ModbusRole.Slave, p, size, foldFlags);
		break;

	case ModbusLogRecordCode.MasterPacket_Tcp:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.TxPacket;
		jnc.DynamicLayout layout(jnc.DynamicLayoutMode.Save, p, size);
		io.layoutModbusTcpAdu(layout, io.ModbusRole.Master);
		log.representDynamicLayout(representation, layout, foldFlags);
		break;

	case ModbusLogRecordCode.SlavePacket_Tcp:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.RxPacket;
		jnc.DynamicLayout layout(jnc.DynamicLayoutMode.Save, p, size);
		io.layoutModbusTcpAdu(layout, io.ModbusRole.Slave);
		log.representDynamicLayout(representation, layout, foldFlags);
		break;

	case ModbusLogRecordCode.InvalidFunction: // legacy
		uint8_t code = *(uint8_t const*)p;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelYellow;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Warning;
		representation.addHyperText($"Invalid or unsupported Modbus function: \e[31m0x%(1; 02x)/%1\e[m" (code));
		return true;

	case ModbusLogRecordCode.ParseError:
		std.Error const* error = (std.Error const*)p;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelYellow;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Warning;
		representation.addHyperText($"Modbus parse error: $(error.m_description)");
		return true;

	default:
		return false;
	}

	return true;
}

//..............................................................................
