//..............................................................................
//
// This script iterates through all IPs on a class C network and sends
// an ARP 'whois' request to each.
//
// Must be used with a Network Sniffer session.
//
//..............................................................................

import "io_TcpIp.jnc"

struct ArpRequestFrame {
	io.EthernetHdr m_ethernet;
	io.ArpHdr m_arp;
	io.EthernetAddress m_srcMac;
	io.Address_ip4 m_srcIp;
	io.EthernetAddress m_dstMac;
	io.Address_ip4 m_dstIp;
}

// specify MAC/IP of the NIC opened in the Network Sniffer session:

static uchar_t const g_srcMac[6] = 0x"00:e0:4c:68:01:12";
static uchar_t const g_srcIp[4] = 0d"192.168.1.114";

void main() {
	connect();

	ArpRequestFrame frame;
	frame.m_ethernet.m_type = io.EthernetType.Arp;
	frame.m_ethernet.m_srcAddress.m_mac = g_srcMac;
	frame.m_ethernet.m_dstAddress.m_mac = 0x"ff:ff:ff:ff:ff:ff";
	frame.m_arp.m_hardwareType = io.ArpHardwareType.Ethernet;
	frame.m_arp.m_protocolType = io.EthernetType.Ip;
	frame.m_arp.m_hardwareLength  = 6;
	frame.m_arp.m_protocolLength  = 4;
	frame.m_arp.m_opcode = io.ArpOpcode.Request;
	frame.m_srcMac.m_mac = g_srcMac;
	frame.m_srcIp.m_i8 = g_srcIp;
	frame.m_dstIp.m_i8 = g_srcIp; // the last octet will go 0..254

	for (uint_t i = 0; i <= 254; i++) {
		frame.m_dstIp.m_i8[3] = i;
		transmit(&frame, sizeof(frame));
		sys.sleep(200); // wait 1/5 second before the next entry
	}
}
