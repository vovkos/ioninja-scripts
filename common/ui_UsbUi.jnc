//..............................................................................
//
// USB device lists
//

import "io_usb.jncx"
import "io_UsbEnumerator.jnc"
import "ui_ComboBox.jnc"
import "ui_PropertyGrid.jnc"
import "std_Array.jnc"

namespace ui {

//! \addtogroup common-ui
//! @{

//..............................................................................

bool isUsbDeviceLess(
	io.UsbDeviceEntry const* entry1,
	io.UsbDeviceEntry const* entry2
) {
	return
		entry1.m_device.m_bus < entry2.m_device.m_bus ||
		entry1.m_device.m_bus == entry2.m_device.m_bus &&
		entry1.m_device.m_address < entry2.m_device.m_address;
}

void refreshUsbDeviceListUi(
	ComboBox* deviceCombo,
	EnumProperty* deviceProp
) {
	size_t count;
	io.UsbDeviceEntry const* deviceList = io.enumerateUsbDevices(io.UsbEnumFlags.Database, &count);

	std.Array deviceArray;
	deviceArray.setCount(count);
	io.UsbDeviceEntry const* entry = deviceList;
	for (size_t i = 0; i < count; i++, entry = entry.m_next)
		deviceArray[i] = entry;

	deviceArray.sort(isUsbDeviceLess);

	io.UsbDevice* prevDevice = deviceCombo.m_currentData;
	EnumPropertyOption* optionTable = new EnumPropertyOption[count];
	deviceCombo.clear();

	for (size_t i = 0; i < count; i++) {
		io.UsbDeviceEntry const* entry = deviceArray[i];

		char const* text = $"@%(1;03d):%(2;03d) %3 by %4" (
			entry.m_device.m_bus,
			entry.m_device.m_address,
			entry.m_description,
			entry.m_manufacturer
		);

		deviceCombo.addItem(text, entry.m_device);

		optionTable[i].m_text = text;
		optionTable[i].m_value = entry.m_device;
	}

	deviceProp.setOptions(optionTable, count);

	if (!prevDevice)
		return;

	size_t i = findUsbDeviceComboIndex(
		deviceCombo,
		prevDevice.m_deviceDescriptor.m_vendorId,
		prevDevice.m_deviceDescriptor.m_productId,
		prevDevice.m_bus,
		prevDevice.m_address
	);

	deviceCombo.m_currentIndex = i != -1 ? i : 0;
}

size_t findUsbDeviceComboIndex(
	ComboBox* deviceCombo,
	uint_t vid,
	uint_t pid,
	uint_t bus = -1,
	uint_t address = -1
) {
	size_t bestIndex = -1;

	size_t itemCount = deviceCombo.m_itemCount;
	for (size_t i = 0; i < itemCount; i++) {
		io.UsbDevice const* device = deviceCombo.m_itemData[i];
		if (device && device.m_deviceDescriptor.m_vendorId == vid &&
			device.m_deviceDescriptor.m_productId == pid) {
			if ((bus == -1 || device.m_bus == bus) &&
				(address == -1 || device.m_address == address))
				return i; // exact match

			bestIndex = i; // VID/PID match, but different address
		}
	}

	return bestIndex;
}

size_t findUsbInterfaceComboIndex(
	ComboBox* interfaceCombo,
	uint_t interfaceId,
	uint_t altSettingId = -1
) {
	size_t bestIndex = -1;

	size_t itemCount = interfaceCombo.m_itemCount;
	for (size_t i = 0; i < itemCount; i++) {
		io.UsbInterfaceDescriptor const* ifaceDesc = interfaceCombo.m_itemData[i];
		if (ifaceDesc && ifaceDesc.m_interfaceId == interfaceId) {
			if (altSettingId == -1 || ifaceDesc.m_altSettingId == altSettingId)
				return i; // exact match

			bestIndex = i; // IID match, but different altSettingId
		}
	}

	return bestIndex;
}

size_t findUsbEndpointComboIndex(
	ComboBox* interfaceCombo,
	uint_t endpointId
) {
	size_t itemCount = interfaceCombo.m_itemCount;
	for (size_t i = 0; i < itemCount; i++) {
		io.UsbEndpointDescriptor const* epDesc = interfaceCombo.m_itemData[i];
		if (epDesc && epDesc.m_endpointId == endpointId)
			return i;
	}

	return -1;
}

//..............................................................................

//! @}

} // namespace ui
